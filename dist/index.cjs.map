{"version":3,"file":"index.cjs","sources":["../src/errors.ts","../src/utils/api-utils.ts","../src/endpoints/cleaner/index.ts","../src/endpoints/enrichment/index.ts","../src/endpoints/search/index.ts","../src/index.ts","../src/endpoints/bulk/index.ts","../src/endpoints/identify/index.ts","../src/endpoints/retrieve/index.ts","../src/endpoints/autocomplete/index.ts","../src/endpoints/jobTitle/index.ts","../src/endpoints/skill/index.ts"],"sourcesContent":["import { AxiosError } from 'axios';\r\nimport { ErrorEndpoint } from './types/error-types';\r\nimport { BaseSearchParams } from './types/search-types';\r\nimport { AutoCompleteParams } from './types/autocomplete-types';\r\nimport { RetrieveParams } from './types/retrieve-types';\r\nimport { JobTitleParams } from './types/jobTitle-types';\r\nimport { SkillParams } from './types/skill-types';\r\n\r\nconst check = (\r\n  params: unknown,\r\n  basePath: string,\r\n  apiKey: string,\r\n  type: string | null,\r\n  endpoint: ErrorEndpoint,\r\n) => new Promise<void>((resolve, reject) => {\r\n  const error: { message?: string, status?: number } = { };\r\n\r\n  if (!params) {\r\n    error.message = `Missing ${type || 'Params'}`;\r\n    error.status = 400;\r\n    reject(error);\r\n  }\r\n\r\n  if (endpoint === 'search') {\r\n    const { searchQuery } = params as BaseSearchParams;\r\n    if (!searchQuery) {\r\n      error.message = 'Missing searchQuery';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'retrieve') {\r\n    const { id } = params as RetrieveParams;\r\n    if (!id) {\r\n      error.message = 'Missing id';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'autocomplete') {\r\n    const { field } = params as AutoCompleteParams;\r\n    const validFields = ['company', 'country', 'industry', 'location', 'major', 'region', 'role', 'school', 'sub_role', 'skill', 'title'];\r\n    if (!field) {\r\n      error.message = 'Missing field';\r\n      error.status = 400;\r\n      reject(error);\r\n    } else if (validFields.indexOf(field) === -1) {\r\n      error.message = `field should be one of: ${validFields}`;\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'jobTitle') {\r\n    const { jobTitle } = params as JobTitleParams;\r\n    if (!jobTitle) {\r\n      error.message = 'Missing jobTitle';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'skill') {\r\n    const { skill } = params as SkillParams;\r\n    if (!skill) {\r\n      error.message = 'Missing skill';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (!basePath) {\r\n    error.message = 'Missing API Base Path';\r\n    error.status = 400;\r\n    reject(error);\r\n  }\r\n\r\n  if (!apiKey || apiKey.length < 36) {\r\n    error.message = 'Invalid API Key';\r\n    error.status = 401;\r\n    reject(error);\r\n  }\r\n\r\n  resolve();\r\n});\r\n\r\nconst errorHandler = (error: AxiosError) => {\r\n  const errorMessages = {\r\n    400: 'Request contained either missing or invalid parameters',\r\n    401: 'Request contained a missing or invalid key',\r\n    402: 'Payment Required, You have hit your account maximum (all matches used)',\r\n    404: 'No records were found matching your request',\r\n    405: 'Request method is not allowed on the requested resource',\r\n    429: 'An error occurred due to requests hitting the API too quick',\r\n    500: 'The server encountered an unexpected condition which prevented it from fulfilling the request',\r\n  };\r\n\r\n  if (error.response) {\r\n    const { status } = error.response;\r\n    const statusCode = status >= 500 && status < 600 ? 500 : status;\r\n\r\n    return ({\r\n      status: statusCode,\r\n      message: errorMessages[statusCode as keyof typeof errorMessages],\r\n    });\r\n  }\r\n\r\n  return ({\r\n    status: 500,\r\n    message: errorMessages[500],\r\n  });\r\n};\r\n\r\nexport { check, errorHandler };\r\n","import { AxiosResponse } from 'axios';\r\nimport { RateLimit } from '../types/api-types';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const parseRateLimitingResponse = (response: AxiosResponse) => {\r\n  const rateLimit = {\r\n    rateLimitRemaining: response.headers['x-ratelimit-remaining'] ? JSON.parse(response.headers['x-ratelimit-remaining'].replace(/'/g, '\"')) : undefined,\r\n    rateLimitReset: response.headers['x-ratelimit-reset'] || undefined,\r\n    rateLimitLimit: response.headers['x-ratelimit-limit'] ? JSON.parse(response.headers['x-ratelimit-limit'].replace(/'/g, '\"')) : undefined,\r\n    totalLimitOveragesRemaining: response.headers['x-totallimit-overages-remaining'] ? Number(response.headers['x-totallimit-overages-remaining']) : undefined,\r\n    totalLimitPurchasedRemaining: response.headers['x-totallimit-purchased-remaining'] ? Number(response.headers['x-totallimit-purchased-remaining']) : undefined,\r\n    totalLimitRemaining: response.headers['x-totallimit-remaining'] ? Number(response.headers['x-totallimit-remaining']) : undefined,\r\n    callCreditsType: response.headers['x-call-credits-type'] || undefined,\r\n    callCreditsSpent: response.headers['x-call-credits-spent'] ? Number(response.headers['x-call-credits-spent']) : undefined,\r\n    lifetimeUsed: response.headers['x-lifetime-used'] ? Number(response.headers['x-lifetime-used']) : undefined,\r\n  } as RateLimit;\r\n\r\n  if (Array.isArray(response.data)) {\r\n    return {\r\n      items: response.data,\r\n      rateLimit,\r\n    };\r\n  }\r\n\r\n  return {\r\n    ...response.data,\r\n    rateLimit,\r\n  };\r\n};\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { BaseResponse } from '../../types/api-types';\r\nimport { CleanerType } from '../../types/cleaner-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default <T, K extends BaseResponse> (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: T,\r\n  type: CleanerType,\r\n) => new Promise<K>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'cleaner').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<K>(`${basePath}/${type}/clean`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...params,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport _ from 'lodash';\r\nimport {\r\n  PersonEnrichmentParams, CompanyEnrichmentParams, EnrichmentType, PersonEnrichmentResponse, CompanyEnrichmentResponse,\r\n} from '../../types/enrichment-types';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default <T extends PersonEnrichmentParams | CompanyEnrichmentParams, K extends PersonEnrichmentResponse | CompanyEnrichmentResponse>(\r\n  basePath: string,\r\n  sandboxBasePath: string,\r\n  apiKey: string,\r\n  params: T,\r\n  type: EnrichmentType,\r\n) => new Promise<K>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'enrichment').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    const url = params.sandbox && type === 'person' ? `${sandboxBasePath}/${type}/enrich` : `${basePath}/${type}/enrich`;\r\n\r\n    const newParams = _.cloneDeep(params);\r\n    const p = new URLSearchParams();\r\n    delete newParams.sandbox;\r\n\r\n    Object.entries(newParams).forEach(([key, value]) => {\r\n      if (key === 'profile') {\r\n        if (Array.isArray(value)) {\r\n          p.append(key, JSON.stringify(value));\r\n        } else {\r\n          p.append(key, value);\r\n        }\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          value.forEach((member) => {\r\n            p.append(key, (member));\r\n          });\r\n        } else {\r\n          p.append(key, JSON.stringify(value));\r\n        }\r\n      } else {\r\n        p.append(key, (value));\r\n      }\r\n    });\r\n\r\n    p.append('api_key', apiKey);\r\n\r\n    axios.get<K>(url, {\r\n      params: p,\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { BaseSearchParams, SearchType } from '../../types/search-types';\r\nimport { BaseResponse } from '../../types/api-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default <T extends BaseSearchParams, K extends BaseResponse>(\r\n  basePath: string,\r\n  sandboxBasePath: string,\r\n  apiKey: string,\r\n  searchType: SearchType,\r\n  params: T,\r\n  type: string,\r\n) => new Promise<K>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'search').then(() => {\r\n    const {\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      dataset, searchQuery, size, scroll_token, titlecase, pretty, sandbox,\r\n    } = params;\r\n\r\n    const searchParams = {\r\n      titlecase: titlecase || false,\r\n      dataset: dataset || 'all',\r\n      scroll_token: scroll_token || null,\r\n      size: size || 10,\r\n      [`${searchType === 'sql' ? 'sql' : 'query'}`]: searchQuery,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Accept-Encoding': 'gzip',\r\n      'X-Api-Key': apiKey,\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    const url = sandbox && type === 'person' ? `${sandboxBasePath}/person/search` : `${basePath}/${type}/search`;\r\n\r\n    axios.post<K>(url, searchParams, { headers })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import { AutoCompleteParams, AutoCompleteResponse } from './types/autocomplete-types';\r\nimport {\r\n  CompanyCleanerParams,\r\n  CompanyCleanerResponse,\r\n  LocationCleanerParams,\r\n  LocationCleanerResponse,\r\n  SchoolCleanerParams,\r\n  SchoolCleanerResponse,\r\n} from './types/cleaner-types';\r\nimport {\r\n  CompanyEnrichmentParams,\r\n  CompanyEnrichmentResponse,\r\n  PersonEnrichmentParams,\r\n  PersonEnrichmentResponse,\r\n} from './types/enrichment-types';\r\nimport { BulkPersonEnrichmentParams, BulkPersonEnrichmentResponse } from './types/bulk-types';\r\nimport {\r\n  autocomplete, bulk, cleaner, enrichment, identify, retrieve, search, jobTitle, skill,\r\n} from './endpoints';\r\nimport {\r\n  CompanySearchParams,\r\n  CompanySearchResponse,\r\n  PersonSearchParams,\r\n  PersonSearchResponse,\r\n} from './types/search-types';\r\nimport { IdentifyParams, IdentifyResponse } from './types/identify-types';\r\nimport { APISettings } from './types/api-types';\r\nimport { RetrieveParams, RetrieveResponse } from './types/retrieve-types';\r\nimport { JobTitleParams, JobTitleResponse } from './types/jobTitle-types';\r\nimport { SkillParams, SkillResponse } from './types/skill-types';\r\n\r\nclass PDLJS {\r\n  private readonly apiKey: string;\r\n\r\n  private readonly basePath: string;\r\n\r\n  private readonly sandboxBasePath: string;\r\n\r\n  public person: {\r\n    enrichment: (params: PersonEnrichmentParams) => Promise<PersonEnrichmentResponse>;\r\n    search: {\r\n      elastic: (params: PersonSearchParams) => Promise<PersonSearchResponse>;\r\n      sql: (params: PersonSearchParams) => Promise<PersonSearchResponse>;\r\n    };\r\n    identify: (params: IdentifyParams) => Promise<IdentifyResponse>;\r\n    retrieve: (params: RetrieveParams) => Promise<RetrieveResponse>;\r\n    bulk: (records: BulkPersonEnrichmentParams) => Promise<BulkPersonEnrichmentResponse>;\r\n  };\r\n\r\n  public company: {\r\n    enrichment: (params: CompanyEnrichmentParams) => Promise<CompanyEnrichmentResponse>;\r\n    search: {\r\n      elastic: (params: CompanySearchParams) => Promise<CompanySearchResponse>;\r\n      sql: (params: CompanySearchParams) => Promise<CompanySearchResponse>;\r\n    };\r\n    cleaner: (params: CompanyCleanerParams) => Promise<CompanyCleanerResponse>;\r\n  };\r\n\r\n  public school: { cleaner: (params: SchoolCleanerParams) => Promise<SchoolCleanerResponse> };\r\n\r\n  public location: { cleaner: (params: LocationCleanerParams) => Promise<LocationCleanerResponse> };\r\n\r\n  public autocomplete: (params: AutoCompleteParams) => Promise<AutoCompleteResponse>;\r\n\r\n  public skill: (params: SkillParams) => Promise<SkillResponse>;\r\n\r\n  public jobTitle: (params: JobTitleParams) => Promise<JobTitleResponse>;\r\n\r\n  constructor({\r\n    apiKey,\r\n    basePath,\r\n    sandboxBasePath,\r\n    version,\r\n  }: APISettings) {\r\n    this.apiKey = apiKey;\r\n    this.basePath = basePath || `https://api.peopledatalabs.com/${version || 'v5'}`;\r\n    this.sandboxBasePath = sandboxBasePath || `https://sandbox.api.peopledatalabs.com/${version || 'v5'}`;\r\n\r\n    this.person = {\r\n      enrichment: (params) => enrichment<PersonEnrichmentParams, PersonEnrichmentResponse>(this.basePath, this.sandboxBasePath, this.apiKey, params, 'person'),\r\n      search: {\r\n        elastic: (params) => search<PersonSearchParams, PersonSearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'elastic', params, 'person'),\r\n        sql: (params) => search<PersonSearchParams, PersonSearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'sql', params, 'person'),\r\n      },\r\n      bulk: (records) => bulk(this.basePath, this.apiKey, records),\r\n      identify: (params) => identify(this.basePath, this.sandboxBasePath, this.apiKey, params),\r\n      retrieve: (params) => retrieve(this.basePath, this.apiKey, params),\r\n    };\r\n\r\n    this.company = {\r\n      enrichment: (params) => enrichment<CompanyEnrichmentParams, CompanyEnrichmentResponse>(this.basePath, this.sandboxBasePath, this.apiKey, params, 'company'),\r\n      search: {\r\n        elastic: (params) => search<CompanySearchParams, CompanySearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'elastic', params, 'company'),\r\n        sql: (params) => search<CompanySearchParams, CompanySearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'sql', params, 'company'),\r\n      },\r\n      cleaner: (params) => cleaner<CompanyCleanerParams, CompanyCleanerResponse>(this.basePath, this.apiKey, params, 'company'),\r\n    };\r\n\r\n    this.school = {\r\n      cleaner: (params) => cleaner<SchoolCleanerParams, SchoolCleanerResponse>(this.basePath, this.apiKey, params, 'school'),\r\n    };\r\n\r\n    this.location = {\r\n      cleaner: (params) => cleaner<LocationCleanerParams, LocationCleanerResponse>(this.basePath, this.apiKey, params, 'location'),\r\n    };\r\n\r\n    this.autocomplete = (params: AutoCompleteParams) => autocomplete(this.basePath, this.apiKey, params);\r\n\r\n    this.jobTitle = (params: JobTitleParams) => jobTitle(this.basePath, this.apiKey, params);\r\n\r\n    this.skill = (params: SkillParams) => skill(this.basePath, this.apiKey, params);\r\n  }\r\n}\r\n\r\nexport default PDLJS;\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { BulkPersonEnrichmentParams, BulkPersonEnrichmentResponse } from '../../types/bulk-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (basePath: string, apiKey: string, records: BulkPersonEnrichmentParams) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept-Encoding': 'gzip',\r\n    'X-Api-Key': apiKey,\r\n    'User-Agent': 'PDL-JS-SDK',\r\n  };\r\n\r\n  return new Promise<BulkPersonEnrichmentResponse>((resolve, reject) => {\r\n    check(records, basePath, apiKey, 'Records', 'bulk').then(() => {\r\n      axios.post<BulkPersonEnrichmentResponse>(`${basePath}/person/bulk`, records, { headers })\r\n        .then((response) => {\r\n          resolve(parseRateLimitingResponse(response));\r\n        })\r\n        .catch((error) => {\r\n          reject(errorHandler(error));\r\n        });\r\n    }).catch((error) => {\r\n      reject(error);\r\n    });\r\n  });\r\n};\r\n","import _ from 'lodash';\r\nimport axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { IdentifyResponse, IdentifyParams } from '../../types/identify-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  sandboxBasePath: string,\r\n  apiKey: string,\r\n  params: IdentifyParams,\r\n) => new Promise<IdentifyResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'identify').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    const url = params.sandbox ? `${sandboxBasePath}/person/identify` : `${basePath}/person/identify`;\r\n\r\n    const newParams = _.cloneDeep(params);\r\n    const p = new URLSearchParams();\r\n    delete newParams.sandbox;\r\n\r\n    Object.entries(newParams).forEach(([key, value]: [string, any]) => {\r\n      if (key === 'profile') {\r\n        if (Array.isArray(value)) {\r\n          p.append(key, JSON.stringify(value));\r\n        } else {\r\n          p.append(key, value);\r\n        }\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          value.forEach((member) => {\r\n            p.append(key, (member));\r\n          });\r\n        } else {\r\n          p.append(key, JSON.stringify(value));\r\n        }\r\n      } else {\r\n        p.append(key, (value));\r\n      }\r\n    });\r\n\r\n    p.append('api_key', apiKey);\r\n\r\n    axios.get<IdentifyResponse>(url, {\r\n      params: p,\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { RetrieveParams, RetrieveResponse } from '../../types/retrieve-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: RetrieveParams,\r\n) => new Promise<RetrieveResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, 'ID', 'retrieve').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<RetrieveResponse>(`${basePath}/person/retrieve/${params.id}`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...params,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport type { AutoCompleteParams, AutoCompleteResponse } from '../../types/autocomplete-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: AutoCompleteParams,\r\n) => new Promise<AutoCompleteResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'autocomplete').then(() => {\r\n    const {\r\n      field, text, size, pretty,\r\n    } = params;\r\n\r\n    const autocompleteParams = {\r\n      field,\r\n      text: text || '',\r\n      size: size || 10,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<AutoCompleteResponse>(`${basePath}/autocomplete`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...autocompleteParams,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { JobTitleParams, JobTitleResponse } from '../../types/jobTitle-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: JobTitleParams,\r\n) => new Promise<JobTitleResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'jobTitle').then(() => {\r\n    const {\r\n      jobTitle, pretty,\r\n    } = params;\r\n\r\n    const jobTitleParams = {\r\n      job_title: jobTitle,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<JobTitleResponse>(`${basePath}/job_title/enrich`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...jobTitleParams,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { SkillParams, SkillResponse } from '../../types/skill-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: SkillParams,\r\n) => new Promise<SkillResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'skill').then(() => {\r\n    const {\r\n      skill, pretty,\r\n    } = params;\r\n\r\n    const skillParams = {\r\n      skill,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<SkillResponse>(`${basePath}/skill/enrich`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...skillParams,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n"],"names":["check","params","basePath","apiKey","type","endpoint","Promise","resolve","reject","error","message","status","searchQuery","id","field","validFields","indexOf","jobTitle","skill","length","errorHandler","errorMessages","response","statusCode","parseRateLimitingResponse","rateLimit","rateLimitRemaining","headers","JSON","parse","replace","undefined","rateLimitReset","rateLimitLimit","totalLimitOveragesRemaining","Number","totalLimitPurchasedRemaining","totalLimitRemaining","callCreditsType","callCreditsSpent","lifetimeUsed","Array","isArray","data","items","_extends","_cleaner","then","axios","get","api_key","_response$data","_enrichment","sandboxBasePath","sandbox","newParams","_","cloneDeep","p","Object","entries","forEach","key","value","append","stringify","member","url","search","searchType","_searchParams","pretty","searchParams","titlecase","dataset","scroll_token","size","post","_ref","version","this","person","company","school","location","autocomplete","enrichment","_this","elastic","sql","bulk","records","identify","URLSearchParams","_identify","retrieve","cleaner","text","job_title"],"mappings":"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"}
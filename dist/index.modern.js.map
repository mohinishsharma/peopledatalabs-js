{"version":3,"file":"index.modern.js","sources":["../src/errors.ts","../src/utils/api-utils.ts","../src/endpoints/autocomplete/index.ts","../src/endpoints/cleaner/index.ts","../src/endpoints/enrichment/index.ts","../src/endpoints/search/index.ts","../src/index.ts","../src/endpoints/bulk/index.ts","../src/endpoints/identify/index.ts","../src/endpoints/retrieve/index.ts","../src/endpoints/jobTitle/index.ts","../src/endpoints/skill/index.ts"],"sourcesContent":["import { AxiosError } from 'axios';\r\nimport { ErrorEndpoint } from './types/error-types';\r\nimport { BaseSearchParams } from './types/search-types';\r\nimport { AutoCompleteParams } from './types/autocomplete-types';\r\nimport { RetrieveParams } from './types/retrieve-types';\r\nimport { JobTitleParams } from './types/jobTitle-types';\r\nimport { SkillParams } from './types/skill-types';\r\n\r\nconst check = (\r\n  params: unknown,\r\n  basePath: string,\r\n  apiKey: string,\r\n  type: string | null,\r\n  endpoint: ErrorEndpoint,\r\n) => new Promise<void>((resolve, reject) => {\r\n  const error: { message?: string, status?: number } = { };\r\n\r\n  if (!params) {\r\n    error.message = `Missing ${type || 'Params'}`;\r\n    error.status = 400;\r\n    reject(error);\r\n  }\r\n\r\n  if (endpoint === 'search') {\r\n    const { searchQuery } = params as BaseSearchParams;\r\n    if (!searchQuery) {\r\n      error.message = 'Missing searchQuery';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'retrieve') {\r\n    const { id } = params as RetrieveParams;\r\n    if (!id) {\r\n      error.message = 'Missing id';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'autocomplete') {\r\n    const { field } = params as AutoCompleteParams;\r\n    const validFields = ['company', 'country', 'industry', 'location', 'major', 'region', 'role', 'school', 'sub_role', 'skill', 'title'];\r\n    if (!field) {\r\n      error.message = 'Missing field';\r\n      error.status = 400;\r\n      reject(error);\r\n    } else if (validFields.indexOf(field) === -1) {\r\n      error.message = `field should be one of: ${validFields}`;\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'jobTitle') {\r\n    const { jobTitle } = params as JobTitleParams;\r\n    if (!jobTitle) {\r\n      error.message = 'Missing jobTitle';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (endpoint === 'skill') {\r\n    const { skill } = params as SkillParams;\r\n    if (!skill) {\r\n      error.message = 'Missing skill';\r\n      error.status = 400;\r\n      reject(error);\r\n    }\r\n  }\r\n\r\n  if (!basePath) {\r\n    error.message = 'Missing API Base Path';\r\n    error.status = 400;\r\n    reject(error);\r\n  }\r\n\r\n  if (!apiKey || apiKey.length >= 36) {\r\n    error.message = 'Invalid API Key';\r\n    error.status = 401;\r\n    reject(error);\r\n  }\r\n\r\n  resolve();\r\n});\r\n\r\nconst errorHandler = (error: AxiosError) => {\r\n  const errorMessages = {\r\n    400: 'Request contained either missing or invalid parameters',\r\n    401: 'Request contained a missing or invalid key',\r\n    402: 'Payment Required, You have hit your account maximum (all matches used)',\r\n    404: 'No records were found matching your request',\r\n    405: 'Request method is not allowed on the requested resource',\r\n    429: 'An error occurred due to requests hitting the API too quick',\r\n    500: 'The server encountered an unexpected condition which prevented it from fulfilling the request',\r\n  };\r\n\r\n  if (error.response) {\r\n    const { status } = error.response;\r\n    const statusCode = status >= 500 && status < 600 ? 500 : status;\r\n\r\n    return ({\r\n      status: statusCode,\r\n      message: errorMessages[statusCode as keyof typeof errorMessages],\r\n    });\r\n  }\r\n\r\n  return ({\r\n    status: 500,\r\n    message: errorMessages[500],\r\n  });\r\n};\r\n\r\nexport { check, errorHandler };\r\n","import { AxiosResponse } from 'axios';\r\nimport { RateLimit } from '../types/api-types';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const parseRateLimitingResponse = (response: AxiosResponse) => {\r\n  const rateLimit = {\r\n    rateLimitRemaining: response.headers['x-ratelimit-remaining'] ? JSON.parse(response.headers['x-ratelimit-remaining'].replace(/'/g, '\"')) : undefined,\r\n    rateLimitReset: response.headers['x-ratelimit-reset'] || undefined,\r\n    rateLimitLimit: response.headers['x-ratelimit-limit'] ? JSON.parse(response.headers['x-ratelimit-limit'].replace(/'/g, '\"')) : undefined,\r\n    totalLimitOveragesRemaining: response.headers['x-totallimit-overages-remaining'] ? Number(response.headers['x-totallimit-overages-remaining']) : undefined,\r\n    totalLimitPurchasedRemaining: response.headers['x-totallimit-purchased-remaining'] ? Number(response.headers['x-totallimit-purchased-remaining']) : undefined,\r\n    totalLimitRemaining: response.headers['x-totallimit-remaining'] ? Number(response.headers['x-totallimit-remaining']) : undefined,\r\n    callCreditsType: response.headers['x-call-credits-type'] || undefined,\r\n    callCreditsSpent: response.headers['x-call-credits-spent'] ? Number(response.headers['x-call-credits-spent']) : undefined,\r\n    lifetimeUsed: response.headers['x-lifetime-used'] ? Number(response.headers['x-lifetime-used']) : undefined,\r\n  } as RateLimit;\r\n\r\n  if (Array.isArray(response.data)) {\r\n    return {\r\n      items: response.data,\r\n      rateLimit,\r\n    };\r\n  }\r\n\r\n  return {\r\n    ...response.data,\r\n    rateLimit,\r\n  };\r\n};\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport type { AutoCompleteParams, AutoCompleteResponse } from '../../types/autocomplete-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: AutoCompleteParams,\r\n) => new Promise<AutoCompleteResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'autocomplete').then(() => {\r\n    const {\r\n      field, text, size, pretty,\r\n    } = params;\r\n\r\n    const autocompleteParams = {\r\n      field,\r\n      text: text || '',\r\n      size: size || 10,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<AutoCompleteResponse>(`${basePath}/autocomplete`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...autocompleteParams,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { BaseResponse } from '../../types/api-types';\r\nimport { CleanerType } from '../../types/cleaner-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default <T, K extends BaseResponse> (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: T,\r\n  type: CleanerType,\r\n) => new Promise<K>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'cleaner').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<K>(`${basePath}/${type}/clean`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...params,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport _ from 'lodash';\r\nimport {\r\n  PersonEnrichmentParams, CompanyEnrichmentParams, EnrichmentType, PersonEnrichmentResponse, CompanyEnrichmentResponse,\r\n} from '../../types/enrichment-types';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default <T extends PersonEnrichmentParams | CompanyEnrichmentParams, K extends PersonEnrichmentResponse | CompanyEnrichmentResponse>(\r\n  basePath: string,\r\n  sandboxBasePath: string,\r\n  apiKey: string,\r\n  params: T,\r\n  type: EnrichmentType,\r\n) => new Promise<K>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'enrichment').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    const url = params.sandbox && type === 'person' ? `${sandboxBasePath}/${type}/enrich` : `${basePath}/${type}/enrich`;\r\n\r\n    const newParams = _.cloneDeep(params);\r\n    const p = new URLSearchParams();\r\n    delete newParams.sandbox;\r\n\r\n    Object.entries(newParams).forEach(([key, value]) => {\r\n      if (key === 'profile') {\r\n        if (Array.isArray(value)) {\r\n          p.append(key, JSON.stringify(value));\r\n        } else {\r\n          p.append(key, value);\r\n        }\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          value.forEach((member) => {\r\n            p.append(key, (member));\r\n          });\r\n        } else {\r\n          p.append(key, JSON.stringify(value));\r\n        }\r\n      } else {\r\n        p.append(key, (value));\r\n      }\r\n    });\r\n\r\n    p.append('api_key', apiKey);\r\n\r\n    axios.get<K>(url, {\r\n      params: p,\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { BaseSearchParams, SearchType } from '../../types/search-types';\r\nimport { BaseResponse } from '../../types/api-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default <T extends BaseSearchParams, K extends BaseResponse>(\r\n  basePath: string,\r\n  sandboxBasePath: string,\r\n  apiKey: string,\r\n  searchType: SearchType,\r\n  params: T,\r\n  type: string,\r\n) => new Promise<K>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'search').then(() => {\r\n    const {\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      dataset, searchQuery, size, scroll_token, titlecase, pretty, sandbox,\r\n    } = params;\r\n\r\n    const searchParams = {\r\n      titlecase: titlecase || false,\r\n      dataset: dataset || 'all',\r\n      scroll_token: scroll_token || null,\r\n      size: size || 10,\r\n      [`${searchType === 'sql' ? 'sql' : 'query'}`]: searchQuery,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Accept-Encoding': 'gzip',\r\n      'X-Api-Key': apiKey,\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    const url = sandbox && type === 'person' ? `${sandboxBasePath}/person/search` : `${basePath}/${type}/search`;\r\n\r\n    axios.post<K>(url, searchParams, { headers })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import { AutoCompleteParams, AutoCompleteResponse } from './types/autocomplete-types';\r\nimport {\r\n  CompanyCleanerParams,\r\n  CompanyCleanerResponse,\r\n  LocationCleanerParams,\r\n  LocationCleanerResponse,\r\n  SchoolCleanerParams,\r\n  SchoolCleanerResponse,\r\n} from './types/cleaner-types';\r\nimport {\r\n  CompanyEnrichmentParams,\r\n  CompanyEnrichmentResponse,\r\n  PersonEnrichmentParams,\r\n  PersonEnrichmentResponse,\r\n} from './types/enrichment-types';\r\nimport { BulkPersonEnrichmentParams, BulkPersonEnrichmentResponse } from './types/bulk-types';\r\nimport {\r\n  autocomplete, bulk, cleaner, enrichment, identify, retrieve, search, jobTitle, skill,\r\n} from './endpoints';\r\nimport {\r\n  CompanySearchParams,\r\n  CompanySearchResponse,\r\n  PersonSearchParams,\r\n  PersonSearchResponse,\r\n} from './types/search-types';\r\nimport { IdentifyParams, IdentifyResponse } from './types/identify-types';\r\nimport { APISettings } from './types/api-types';\r\nimport { RetrieveParams, RetrieveResponse } from './types/retrieve-types';\r\nimport { JobTitleParams, JobTitleResponse } from './types/jobTitle-types';\r\nimport { SkillParams, SkillResponse } from './types/skill-types';\r\n\r\nclass PDLJS {\r\n  private readonly apiKey: string;\r\n\r\n  private readonly basePath: string;\r\n\r\n  private readonly sandboxBasePath: string;\r\n\r\n  public person: {\r\n    enrichment: (params: PersonEnrichmentParams) => Promise<PersonEnrichmentResponse>;\r\n    search: {\r\n      elastic: (params: PersonSearchParams) => Promise<PersonSearchResponse>;\r\n      sql: (params: PersonSearchParams) => Promise<PersonSearchResponse>;\r\n    };\r\n    identify: (params: IdentifyParams) => Promise<IdentifyResponse>;\r\n    retrieve: (params: RetrieveParams) => Promise<RetrieveResponse>;\r\n    bulk: (records: BulkPersonEnrichmentParams) => Promise<BulkPersonEnrichmentResponse>;\r\n  };\r\n\r\n  public company: {\r\n    enrichment: (params: CompanyEnrichmentParams) => Promise<CompanyEnrichmentResponse>;\r\n    search: {\r\n      elastic: (params: CompanySearchParams) => Promise<CompanySearchResponse>;\r\n      sql: (params: CompanySearchParams) => Promise<CompanySearchResponse>;\r\n    };\r\n    cleaner: (params: CompanyCleanerParams) => Promise<CompanyCleanerResponse>;\r\n  };\r\n\r\n  public school: { cleaner: (params: SchoolCleanerParams) => Promise<SchoolCleanerResponse> };\r\n\r\n  public location: { cleaner: (params: LocationCleanerParams) => Promise<LocationCleanerResponse> };\r\n\r\n  public autocomplete: (params: AutoCompleteParams) => Promise<AutoCompleteResponse>;\r\n\r\n  public skill: (params: SkillParams) => Promise<SkillResponse>;\r\n\r\n  public jobTitle: (params: JobTitleParams) => Promise<JobTitleResponse>;\r\n\r\n  constructor({\r\n    apiKey,\r\n    basePath,\r\n    sandboxBasePath,\r\n    version,\r\n  }: APISettings) {\r\n    this.apiKey = apiKey;\r\n    this.basePath = basePath || `https://api.peopledatalabs.com/${version || 'v5'}`;\r\n    this.sandboxBasePath = sandboxBasePath || `https://sandbox.api.peopledatalabs.com/${version || 'v5'}`;\r\n\r\n    this.person = {\r\n      enrichment: (params) => enrichment<PersonEnrichmentParams, PersonEnrichmentResponse>(this.basePath, this.sandboxBasePath, this.apiKey, params, 'person'),\r\n      search: {\r\n        elastic: (params) => search<PersonSearchParams, PersonSearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'elastic', params, 'person'),\r\n        sql: (params) => search<PersonSearchParams, PersonSearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'sql', params, 'person'),\r\n      },\r\n      bulk: (records) => bulk(this.basePath, this.apiKey, records),\r\n      identify: (params) => identify(this.basePath, this.sandboxBasePath, this.apiKey, params),\r\n      retrieve: (params) => retrieve(this.basePath, this.apiKey, params),\r\n    };\r\n\r\n    this.company = {\r\n      enrichment: (params) => enrichment<CompanyEnrichmentParams, CompanyEnrichmentResponse>(this.basePath, this.sandboxBasePath, this.apiKey, params, 'company'),\r\n      search: {\r\n        elastic: (params) => search<CompanySearchParams, CompanySearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'elastic', params, 'company'),\r\n        sql: (params) => search<CompanySearchParams, CompanySearchResponse>(this.basePath, this.sandboxBasePath, this.apiKey, 'sql', params, 'company'),\r\n      },\r\n      cleaner: (params) => cleaner<CompanyCleanerParams, CompanyCleanerResponse>(this.basePath, this.apiKey, params, 'company'),\r\n    };\r\n\r\n    this.school = {\r\n      cleaner: (params) => cleaner<SchoolCleanerParams, SchoolCleanerResponse>(this.basePath, this.apiKey, params, 'school'),\r\n    };\r\n\r\n    this.location = {\r\n      cleaner: (params) => cleaner<LocationCleanerParams, LocationCleanerResponse>(this.basePath, this.apiKey, params, 'location'),\r\n    };\r\n\r\n    this.autocomplete = (params: AutoCompleteParams) => autocomplete(this.basePath, this.apiKey, params);\r\n\r\n    this.jobTitle = (params: JobTitleParams) => jobTitle(this.basePath, this.apiKey, params);\r\n\r\n    this.skill = (params: SkillParams) => skill(this.basePath, this.apiKey, params);\r\n  }\r\n}\r\n\r\nexport default PDLJS;\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { BulkPersonEnrichmentParams, BulkPersonEnrichmentResponse } from '../../types/bulk-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (basePath: string, apiKey: string, records: BulkPersonEnrichmentParams) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Accept-Encoding': 'gzip',\r\n    'X-Api-Key': apiKey,\r\n    'User-Agent': 'PDL-JS-SDK',\r\n  };\r\n\r\n  return new Promise<BulkPersonEnrichmentResponse>((resolve, reject) => {\r\n    check(records, basePath, apiKey, 'Records', 'bulk').then(() => {\r\n      axios.post<BulkPersonEnrichmentResponse>(`${basePath}/person/bulk`, records, { headers })\r\n        .then((response) => {\r\n          resolve(parseRateLimitingResponse(response));\r\n        })\r\n        .catch((error) => {\r\n          reject(errorHandler(error));\r\n        });\r\n    }).catch((error) => {\r\n      reject(error);\r\n    });\r\n  });\r\n};\r\n","import _ from 'lodash';\r\nimport axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { IdentifyResponse, IdentifyParams } from '../../types/identify-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  sandboxBasePath: string,\r\n  apiKey: string,\r\n  params: IdentifyParams,\r\n) => new Promise<IdentifyResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'identify').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    const url = params.sandbox ? `${sandboxBasePath}/person/identify` : `${basePath}/person/identify`;\r\n\r\n    const newParams = _.cloneDeep(params);\r\n    const p = new URLSearchParams();\r\n    delete newParams.sandbox;\r\n\r\n    Object.entries(newParams).forEach(([key, value]: [string, any]) => {\r\n      if (key === 'profile') {\r\n        if (Array.isArray(value)) {\r\n          p.append(key, JSON.stringify(value));\r\n        } else {\r\n          p.append(key, value);\r\n        }\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          value.forEach((member) => {\r\n            p.append(key, (member));\r\n          });\r\n        } else {\r\n          p.append(key, JSON.stringify(value));\r\n        }\r\n      } else {\r\n        p.append(key, (value));\r\n      }\r\n    });\r\n\r\n    p.append('api_key', apiKey);\r\n\r\n    axios.get<IdentifyResponse>(url, {\r\n      params: p,\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { RetrieveParams, RetrieveResponse } from '../../types/retrieve-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: RetrieveParams,\r\n) => new Promise<RetrieveResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, 'ID', 'retrieve').then(() => {\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<RetrieveResponse>(`${basePath}/person/retrieve/${params.id}`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...params,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { JobTitleParams, JobTitleResponse } from '../../types/jobTitle-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: JobTitleParams,\r\n) => new Promise<JobTitleResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'jobTitle').then(() => {\r\n    const {\r\n      jobTitle, pretty,\r\n    } = params;\r\n\r\n    const jobTitleParams = {\r\n      job_title: jobTitle,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<JobTitleResponse>(`${basePath}/job_title/enrich`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...jobTitleParams,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n","import axios from 'axios';\r\nimport { check, errorHandler } from '../../errors';\r\nimport { SkillParams, SkillResponse } from '../../types/skill-types';\r\nimport { parseRateLimitingResponse } from '../../utils/api-utils';\r\n\r\nexport default (\r\n  basePath: string,\r\n  apiKey: string,\r\n  params: SkillParams,\r\n) => new Promise<SkillResponse>((resolve, reject) => {\r\n  check(params, basePath, apiKey, null, 'skill').then(() => {\r\n    const {\r\n      skill, pretty,\r\n    } = params;\r\n\r\n    const skillParams = {\r\n      skill,\r\n      pretty: pretty || false,\r\n    };\r\n\r\n    const headers = {\r\n      'Accept-Encoding': 'gzip',\r\n      'User-Agent': 'PDL-JS-SDK',\r\n    };\r\n\r\n    axios.get<SkillResponse>(`${basePath}/skill/enrich`, {\r\n      params: {\r\n        api_key: apiKey,\r\n        ...skillParams,\r\n      },\r\n      headers,\r\n    })\r\n      .then((response) => {\r\n        if (response?.data?.status === 200) {\r\n          resolve(parseRateLimitingResponse(response));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        reject(errorHandler(error));\r\n      });\r\n  }).catch((error) => {\r\n    reject(error);\r\n  });\r\n});\r\n"],"names":["check","params","basePath","apiKey","type","endpoint","Promise","resolve","reject","error","message","status","searchQuery","id","field","validFields","indexOf","jobTitle","skill","length","errorHandler","errorMessages","response","statusCode","parseRateLimitingResponse","rateLimit","rateLimitRemaining","headers","JSON","parse","replace","undefined","rateLimitReset","rateLimitLimit","totalLimitOveragesRemaining","Number","totalLimitPurchasedRemaining","totalLimitRemaining","callCreditsType","callCreditsSpent","lifetimeUsed","Array","isArray","data","items","_extends","cleaner","then","axios","get","api_key","_response$data","catch","enrichment","sandboxBasePath","sandbox","_","cloneDeep","URLSearchParams","newParams","Object","entries","forEach","key","value","p","append","stringify","member","url","search","searchType","dataset","size","scroll_token","titlecase","pretty","post","PDLJS","constructor","version","this","person","company","school","location","autocomplete","elastic","sql","bulk","records","identify","retrieve","text","job_title"],"mappings":"+QAQA,MAAMA,EAAQ,CACZC,EACAC,EACAC,EACAC,EACAC,IACG,IAAIC,QAAc,CAACC,EAASC,KAC/B,MAAMC,EAA+C,CAAA,EAQrD,GANKR,IACHQ,EAAMC,QAAU,WAAWN,GAAQ,WACnCK,EAAME,OAAS,IACfH,EAAOC,IAGQ,WAAbJ,EAAuB,CACzB,MAAMO,YAAEA,GAAgBX,EACnBW,IACHH,EAAMC,QAAU,sBAChBD,EAAME,OAAS,IACfH,EAAOC,GAEV,CAED,GAAiB,aAAbJ,EAAyB,CAC3B,MAAMQ,GAAEA,GAAOZ,EACVY,IACHJ,EAAMC,QAAU,aAChBD,EAAME,OAAS,IACfH,EAAOC,GAEV,CAED,GAAiB,iBAAbJ,EAA6B,CAC/B,MAAMS,MAAEA,GAAUb,EACDc,EAAG,CAAC,UAAW,UAAW,WAAY,WAAY,QAAS,SAAU,OAAQ,SAAU,WAAY,QAAS,SACxHD,GAIsC,IAAhCC,EAAYC,QAAQF,KAC7BL,EAAMC,QAAqC,2BAAAK,IAC3CN,EAAME,OAAS,IACfH,EAAOC,KANPA,EAAMC,QAAU,gBAChBD,EAAME,OAAS,IACfH,EAAOC,GAMV,CAED,GAAiB,aAAbJ,EAAyB,CAC3B,MAAMY,SAAEA,GAAahB,EAChBgB,IACHR,EAAMC,QAAU,mBAChBD,EAAME,OAAS,IACfH,EAAOC,GAEV,CAED,GAAiB,UAAbJ,EAAsB,CACxB,MAAMa,MAAEA,GAAUjB,EACbiB,IACHT,EAAMC,QAAU,gBAChBD,EAAME,OAAS,IACfH,EAAOC,GAEV,CAEIP,IACHO,EAAMC,QAAU,wBAChBD,EAAME,OAAS,IACfH,EAAOC,MAGJN,GAAUA,EAAOgB,QAAU,MAC9BV,EAAMC,QAAU,kBAChBD,EAAME,OAAS,IACfH,EAAOC,IAGTF,GACF,GAEkBa,EAAIX,IACpB,MAAMY,EAAgB,CACpB,IAAK,yDACL,IAAK,6CACL,IAAK,yEACL,IAAK,8CACL,IAAK,0DACL,IAAK,8DACL,IAAK,iGAGP,GAAIZ,EAAMa,SAAU,CAClB,MAAMX,OAAEA,GAAWF,EAAMa,SACnBC,EAAaZ,GAAU,KAAOA,EAAS,IAAM,IAAMA,EAEzD,MAAQ,CACNA,OAAQY,EACRb,QAASW,EAAcE,GAE1B,CAED,MAAQ,CACNZ,OAAQ,IACRD,QAASW,EAAc,KACxB,EC5GmCG,EAAIF,IACxC,MAAMG,EAAY,CAChBC,mBAAoBJ,EAASK,QAAQ,yBAA2BC,KAAKC,MAAMP,EAASK,QAAQ,yBAAyBG,QAAQ,KAAM,WAAQC,EAC3IC,eAAgBV,EAASK,QAAQ,2BAAwBI,EACzDE,eAAgBX,EAASK,QAAQ,qBAAuBC,KAAKC,MAAMP,EAASK,QAAQ,qBAAqBG,QAAQ,KAAM,WAAQC,EAC/HG,4BAA6BZ,EAASK,QAAQ,mCAAqCQ,OAAOb,EAASK,QAAQ,yCAAsCI,EACjJK,6BAA8Bd,EAASK,QAAQ,oCAAsCQ,OAAOb,EAASK,QAAQ,0CAAuCI,EACpJM,oBAAqBf,EAASK,QAAQ,0BAA4BQ,OAAOb,EAASK,QAAQ,gCAA6BI,EACvHO,gBAAiBhB,EAASK,QAAQ,6BAA0BI,EAC5DQ,iBAAkBjB,EAASK,QAAQ,wBAA0BQ,OAAOb,EAASK,QAAQ,8BAA2BI,EAChHS,aAAclB,EAASK,QAAQ,mBAAqBQ,OAAOb,EAASK,QAAQ,yBAAsBI,GAGpG,OAAIU,MAAMC,QAAQpB,EAASqB,MAClB,CACLC,MAAOtB,EAASqB,KAChBlB,aAIJoB,EAAA,CAAA,EACKvB,EAASqB,KAAI,CAChBlB,aAAS,ECrBb,ICCAqB,EAAA,CACE5C,EACAC,EACAF,EACAG,IACG,IAAIE,QAAW,CAACC,EAASC,KAC5BR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,WAAW4C,KAAK,KAMpDC,EAAMC,IAAO,GAAG/C,KAAYE,UAAc,CACxCH,OAAM4C,EAAA,CACJK,QAAS/C,GACNF,GAEL0B,QAVc,CACd,kBAAmB,OACnB,aAAc,gBAUboB,KAAMzB,IACL,IAAA6B,EAA+B,OAA3B7B,MAAAA,GAAc,OAAdA,EAAAA,EAAUqB,WAAVrB,EAAA6B,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GAAM,EAEhC,GAAG2C,MAAO3C,IACRD,EAAOC,IACR,GC3BH4C,EAAe,CACbnD,EACAoD,EACAnD,EACAF,EACAG,IACG,IAAIE,QAAW,CAACC,EAASC,KAC5BR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,cAAc4C,KAAK,KACvD,QAKY9C,EAAOsD,SAAoB,WAATnD,KAAuBkD,KAAmBlD,WAAgB,GAAGF,KAAYE,aAErFoD,EAAEC,UAAUxD,KACpB,IAAqByD,uBACfC,EAACJ,QAEjBK,OAAOC,QAAQF,GAAWG,QAAQ,EAAEC,EAAKC,MAC3B,YAARD,EACEtB,MAAMC,QAAQsB,GAChBC,EAAEC,OAAOH,EAAKnC,KAAKuC,UAAUH,IAE7BC,EAAEC,OAAOH,EAAKC,GAEU,iBAAVA,EACZvB,MAAMC,QAAQsB,GAChBA,EAAMF,QAASM,IACbH,EAAEC,OAAOH,EAAMK,EACjB,GAEAH,EAAEC,OAAOH,EAAKnC,KAAKuC,UAAUH,IAG/BC,EAAEC,OAAOH,EAAMC,EAChB,GAGHC,EAAEC,OAAO,UAAW/D,GAEpB6C,EAAMC,IAAOoB,EAAK,CAChBpE,OAAQgE,EACRtC,QAnCc,CACd,kBAAmB,OACnB,aAAc,gBAmCboB,KAAMzB,IACL,IAAA6B,EAA+B,OAAnB,MAAR7B,GAAA,OAAQ6B,EAAR7B,EAAUqB,WAAF,EAARQ,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GAAM,EAEhC,GAAG2C,MAAO3C,IACRD,EAAOC,IACR,GCzDH6D,EAAA,CACEpE,EACAoD,EACAnD,EACAoE,EACAtE,EACAG,IACG,IAAIE,QAAW,CAACC,EAASC,KAC5BR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,UAAU4C,KAAK,KACnD,MAAMyB,QAEJA,EAAO5D,YAAEA,EAAW6D,KAAEA,EAAIC,aAAEA,EAAYC,UAAEA,EAASC,OAAEA,EAAMrB,QAAEA,GAC3DtD,EAoBJ+C,EAAM6B,KAFMtB,GAAoB,WAATnD,KAAuBkD,qBAAqCpD,KAAYE,WAhB1E,CACnBuE,UAAWA,IAAa,EACxBH,QAASA,GAAW,MACpBE,aAAcA,GAAgB,KAC9BD,KAAMA,GAAQ,GACd,CAAmB,QAAfF,EAAuB,MAAQ,SAAY3D,EAC/CgE,OAAQA,IAAU,GAYa,CAAEjD,QATnB,CACd,eAAgB,mBAChB,kBAAmB,OACnB,YAAaxB,EACb,aAAc,gBAMb4C,KAAMzB,IACL,IAAA6B,EAA+B,OAA3B7B,MAAAA,GAAA,OAAAA,EAAAA,EAAUqB,WAAVrB,EAAA6B,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GACtB,EACJ,GAAG2C,MAAO3C,IACRD,EAAOC,EACT,EACF,GCnBA,MAAWqE,EAqCTC,aAAY5E,OACVA,EAAMD,SACNA,EAAQoD,gBACRA,EAAe0B,QACfA,IACYC,KAzCG9E,YAAM,EAAA8E,KAEN/E,cAEAoD,EAAAA,KAAAA,qBAEV4B,EAAAA,KAAAA,YAWAC,EAAAA,KAAAA,oBASAC,YAAM,EAAAH,KAENI,cAAQ,EAAAJ,KAERK,kBAAY,EAAAL,KAEZ/D,WAEAD,EAAAA,KAAAA,gBAQLgE,KAAK9E,OAASA,EACd8E,KAAK/E,SAAWA,qCAA8C8E,GAAW,OACzEC,KAAK3B,gBAAkBA,6CAA6D0B,GAAW,OAE/FC,KAAKC,OAAS,CACZ7B,WAAapD,GAAWoD,EAA6D4B,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQF,EAAQ,UAC/IqE,OAAQ,CACNiB,QAAUtF,GAAWqE,EAAiDW,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQ,UAAWF,EAAQ,UAC3IuF,IAAMvF,GAAWqE,EAAiDW,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQ,MAAOF,EAAQ,WAErIwF,KAAOC,GC/Eb,EAAgBxF,EAAkBC,EAAgBuF,KAChD,MAAM/D,EAAU,CACd,eAAgB,mBAChB,kBAAmB,OACnB,YAAaxB,EACb,aAAc,cAGhB,OAAWG,IAAAA,QAAsC,CAACC,EAASC,KACzDR,EAAM0F,EAASxF,EAAUC,EAAQ,UAAW,QAAQ4C,KAAK,KACvDC,EAAM6B,KAAmC,GAAG3E,gBAAwBwF,EAAS,CAAE/D,YAC5EoB,KAAMzB,IACLf,EAAQiB,EAA0BF,GAAS,GAE5C8B,MAAO3C,IACND,EAAOY,EAAaX,GAAM,EAC3B,GACF2C,MAAO3C,IACRD,EAAOC,EAAK,EACb,EAEJ,ED0DwBgF,CAAKR,KAAK/E,SAAU+E,KAAK9E,OAAQuF,GACpDC,SAAW1F,GE/EjB,EACEC,EACAoD,EACAnD,EACAF,IACG,IAAWK,QAAmB,CAACC,EAASC,KAC3CR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,YAAY4C,KAAK,KACrD,MAKMsB,EAAMpE,EAAOsD,QAAa,GAAAD,oBAAuC,GAAApD,oBAExDyD,EAAGH,EAAEC,UAAUxD,GACvBgE,EAAG,IAAqBP,uBACxBC,EAAUJ,QAEjBK,OAAOC,QAAQF,GAAWG,QAAQ,EAAEC,EAAKC,MAC3B,YAARD,EACEtB,MAAMC,QAAQsB,GAChBC,EAAEC,OAAOH,EAAKnC,KAAKuC,UAAUH,IAE7BC,EAAEC,OAAOH,EAAKC,GAEU,mBACtBvB,MAAMC,QAAQsB,GAChBA,EAAMF,QAASM,IACbH,EAAEC,OAAOH,EAAMK,EACjB,GAEAH,EAAEC,OAAOH,EAAKnC,KAAKuC,UAAUH,IAG/BC,EAAEC,OAAOH,EAAMC,EAChB,GAGHC,EAAEC,OAAO,UAAW/D,GAEpB6C,EAAMC,IAAsBoB,EAAK,CAC/BpE,OAAQgE,EACRtC,QAnCc,CACd,kBAAmB,OACnB,aAAc,gBAmCboB,KAAMzB,IACL,IAAA6B,EAA+B,aAA3B7B,GAAc,SAAdA,EAAUqB,aAAVQ,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GACtB,KACD2C,MAAO3C,IACRD,EAAOC,EAAK,EACb,GFyByBkF,CAASV,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQF,GACjF2F,SAAW3F,GGjFjB,EACEC,EACAC,EACAF,IACG,IAAIK,QAA0B,CAACC,EAASC,KAC3CR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,YAAY4C,KAAK,KAMrDC,EAAMC,IAAyB,GAAA/C,qBAA4BD,EAAOY,KAAM,CACtEZ,OAAM4C,EAAA,CACJK,QAAS/C,GACNF,GAEL0B,QAVc,CACd,kBAAmB,OACnB,aAAc,gBAUboB,KAAMzB,IACL,IAAA6B,EAA+B,OAA3B7B,MAAAA,GAAc,OAAdA,EAAAA,EAAUqB,WAAVrB,EAAA6B,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GAAM,EAEhC,GAAG2C,MAAO3C,IACRD,EAAOC,IACR,GHqDyBmF,CAASX,KAAK/E,SAAU+E,KAAK9E,OAAQF,IAG7DgF,KAAKE,QAAU,CACb9B,WAAapD,GAAWoD,EAA+D4B,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQF,EAAQ,WACjJqE,OAAQ,CACNiB,QAAUtF,GAAWqE,EAAmDW,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQ,UAAWF,EAAQ,WAC7IuF,IAAMvF,GAAWqE,EAAmDW,KAAK/E,SAAU+E,KAAK3B,gBAAiB2B,KAAK9E,OAAQ,MAAOF,EAAQ,YAEvI6C,QAAU7C,GAAW6C,EAAsDmC,KAAK/E,SAAU+E,KAAK9E,OAAQF,EAAQ,YAGjHgF,KAAKG,OAAS,CACZtC,QAAU7C,GAAW6C,EAAoDmC,KAAK/E,SAAU+E,KAAK9E,OAAQF,EAAQ,WAG/GgF,KAAKI,SAAW,CACdvC,QAAU7C,GAAW6C,EAAwDmC,KAAK/E,SAAU+E,KAAK9E,OAAQF,EAAQ,aAGnHgF,KAAKK,aAAgBrF,GJrGV,EACbC,EACAC,EACAF,IACG,IAAIK,QAA8B,CAACC,EAASC,KAC/CR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,gBAAgB4C,KAAK,KACzD,MAAMjC,MACJA,EAAK+E,KAAEA,EAAIpB,KAAEA,EAAIG,OAAEA,GACjB3E,EAcJ+C,EAAMC,IAA6B,GAAA/C,iBAAyB,CAC1DD,UACEiD,QAAS/C,GAdc,CACzBW,QACA+E,KAAMA,GAAQ,GACdpB,KAAMA,GAAQ,GACdG,OAAQA,IAAU,IAalBjD,QAVc,CACd,kBAAmB,OACnB,aAAc,gBAUboB,KAAMzB,IAAY,IAAA6B,EACc,aAA3B7B,GAAA,SAAAA,EAAUqB,aAAVQ,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GAAM,EAEhC,GAAG2C,MAAO3C,IACRD,EAAOC,EACT,EACF,GI6DwD6E,CAAaL,KAAK/E,SAAU+E,KAAK9E,OAAQF,GAE7FgF,KAAKhE,SAAYhB,KItGnBC,EACAC,EACAF,IACG,IAAWK,QAAmB,CAACC,EAASC,KAC3CR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,YAAY4C,KAAK,KACrD,MAAM9B,SACJA,EAAQ2D,OAAEA,GACR3E,EAYJ+C,EAAMC,IAAyB,GAAA/C,qBAA6B,CAC1DD,OACEiD,EAAAA,CAAAA,QAAS/C,GAZU,CACrB2F,UAAW7E,EACX2D,OAAQA,IAAU,IAalBjD,QAVc,CACd,kBAAmB,OACnB,aAAc,gBAUboB,KAAMzB,UAC0B,OAAnB,MAARA,UAAQ6B,EAAR7B,EAAUqB,WAAF,EAARQ,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GACtB,KACD2C,MAAO3C,IACRD,EAAOC,IACR,GJkE6CQ,CAASgE,KAAK/E,SAAU+E,KAAK9E,OAAQF,GAEjFgF,KAAK/D,MAASjB,KKxGhBC,EACAC,EACAF,IACG,IAAIK,QAAuB,CAACC,EAASC,KACxCR,EAAMC,EAAQC,EAAUC,EAAQ,KAAM,SAAS4C,KAAK,KAClD,MAAM7B,MACJA,EAAK0D,OAAEA,GACL3E,EAYJ+C,EAAMC,IAAsB,GAAA/C,iBAAyB,CACnDD,UACEiD,QAAS/C,GAZO,CAClBe,QACA0D,OAAQA,IAAU,IAalBjD,QAVc,CACd,kBAAmB,OACnB,aAAc,gBAUboB,KAAMzB,UAC0B,OAAnB,MAARA,UAAQ6B,EAAR7B,EAAUqB,WAAF,EAARQ,EAAgBxC,SAClBJ,EAAQiB,EAA0BF,GACnC,GAEF8B,MAAO3C,IACND,EAAOY,EAAaX,GACtB,KACD2C,MAAO3C,IACRD,EAAOC,IACR,GLoEuCS,CAAM+D,KAAK/E,SAAU+E,KAAK9E,OAAQF,EAC1E"}